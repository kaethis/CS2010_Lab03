#include <iostream>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
using namespace std;

/* Author:	Matt W. Martin, 4374851
 *		kaethis@tasmantis.net
 *
 * Project:	CS2010, Lab Assignment #3
 *		Part I: CRAPS! CRAPS! CRAPS! */ 

int Die(){

	/* This method simulates a single dice-roll by generating a number
	 * between [1-6], returning the value as an int. */

	return (rand() % 6 + 1);
}

void Roll(int &die1_val, int &die2_val){

	/* This method applies the values generated by Die to two ints. */

	die1_val = Die();
	die2_val = Die();
}

void DiceDrawer(int die1_val, int die2_val){

	/* This method draws two dice according to what two ints are passed
	 * to it. The diagram below shows exactly which locations in the
	 * array represent where the dot would be on a die.
	 
	/* 			D I E - A G R A M
	 * -----------------------------------------------------------
	 *		        1		 	       1
	 * ___________0123456789012345_______________0123456789012345_
	 * die1[0] =     B   S i d e A    die2[0] =    .-------.      
	 * die1[1] =    e .--------.      die2[1] =   / o o o / \     
         * die1[2] =   d / \  o o o \     die2[2] =  / o o o / x \    
	 * die1[3] =  i / x \  o o o \    die2[3] =   o o o / x x \   
	 * die1[4] = S / x x \  o o o     die2[4] =  \-----. x x x .  
         * die1[5] =  . x x x .-------    die2[5] =  .x x x \ x x /   
         * die1[6] =   \ x x / x x x /    die2[6] =  \ x x x \ x /    
	 * die1[7] =    \ x / x x x /     die2[7] =   \ x x x \ /     
	 * die1[8] =     \ / x x x /      ____________________________
	 *		   S i d e C     |S i d e A = significant face
	 *				 |S i d e s B & C = extraneous */
	
	char die1[9][17] =	{"                ", 
				 "    .--------.  ",
        			 "   / \\        \\ ", 
				 "  /   \\        \\",
				 " /     \\        ", 
				 ".       .-------",
        			 " \\     /       /", 
				 "  \\   /       / ",
				 "   \\ /       /  "};

	char die2[9][17] =	{"  .-------.     ", 
				 " /       / \\    ",
				 "/       /   \\   ", 
				 "       /     \\  ",
				 "\\-----.       . ", 
				 ".      \\     /  ",
				 "\\       \\   /   ", 
				 " \\       \\ /    "};
	
	/* The next two switches apply the dots to the corresponding dice faces,
	 * depending on which values were passed to die1_val and die2_val, 
	 * respectively. */

	switch(die1_val){

		case 1:	
	   /* Side A */ die1[3][11] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[5][4]  = 'x'; die1[7][4]  = 'x';
	  		die1[5][2]  = 'x'; die1[5][6]  = 'x'; 
	   /* Side C */ die1[6][9]  = 'x'; die1[6][13] = 'x'; die1[8][7]  = 'x';
			die1[8][11] = 'x';
			break;

		case 2:	
	   /* Side A */ die1[2][8]  = 'o'; die1[4][14] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[5][2]  = 'x'; die1[5][6]  = 'x';
	  		die1[7][4]  = 'x';
	   /* Side C */ die1[6][9]  = 'x'; die1[6][11] = 'x'; die1[6][13] = 'x';
			die1[8][7]  = 'x'; die1[8][9]  = 'x'; die1[8][11] = 'x';
			break;
	
		case 3:
	   /* Side A */	die1[2][8]  = 'o'; die1[3][11] = 'o'; die1[4][14] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[4][3]  = 'x'; die1[5][2]  = 'x';
			die1[5][6]  = 'x'; die1[6][5]  = 'x'; die1[7][4]  = 'x';
	   /* Side C */ die1[6][9]  = 'x'; die1[7][10] = 'x'; die1[8][11] = 'x';
			die1[6][13] = 'x'; die1[8][7]  = 'x';
			break;

		case 4:	
	   /* Side A */ die1[2][8]  = 'o'; die1[2][12] = 'o'; die1[4][10] = 'o';
			die1[4][14] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[5][2]  = 'x'; die1[5][4]  = 'x';
			die1[5][6]  = 'x'; die1[7][4]  = 'x';
	   /* Side C */ die1[6][9]  = 'x'; die1[7][8]  = 'x'; die1[8][7]  = 'x';
			die1[6][13] = 'x'; die1[7][12] = 'x'; die1[8][11] = 'x';
			break;

		case 5:	
	   /* Side A */ die1[2][8]  = 'o'; die1[2][12] = 'o'; die1[3][11] = 'o';
			die1[4][10] = 'o'; die1[4][14] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[4][5]  = 'x'; die1[5][6]  = 'x';
			die1[5][2]  = 'x'; die1[6][3]  = 'x'; die1[7][4]  = 'x';
	   /* Side C */ die1[6][9]  = 'x'; die1[6][13] = 'x'; die1[8][7]  = 'x';
			die1[8][11] = 'x';
			break;

		case 6:	
	   /* Side A */ die1[2][8]  = 'o'; die1[2][10] = 'o'; die1[2][12] = 'o';
			die1[4][10] = 'o'; die1[4][12] = 'o'; die1[4][14] = 'o';
	   /* Side B */ die1[3][4]  = 'x'; die1[5][2]  = 'x'; die1[5][6]  = 'x';
			die1[7][4]  = 'x';
	   /* Side C */ die1[6][9]  = 'x'; die1[6][13] = 'x'; die1[7][10] = 'x';
			die1[8][7]  = 'x';die1[8][11]  = 'x';
			break;
	}

	switch(die2_val){

		case 1:	
	   /* Side A */ die2[2][4]  = 'o';
	   /* Side B */ die2[2][10] = 'x'; die2[4][10] = 'x'; die2[6][10]  = 'x';
	   /* Side C */ die2[5][1]  = 'x'; die2[7][7]  = 'x';
			break;

		case 2:	
	   /* Side A */ die2[1][7]  = 'o'; die2[3][1]  =  'o';
	   /* Side B */ die2[4][10] = 'x';
	   /* Side C */ die2[5][1]  = 'x'; die2[6][4]  = 'x'; die2[7][7]  = 'x';
			break;
	
		case 3:
	   /* Side A */	die2[1][7]  = 'o'; die2[2][4]  = 'o'; die2[3][1]  = 'o';
	   /* Side B */ die2[3][10] = 'x'; die2[6][10] = 'x';
	   /* Side C */ die2[6][4]  = 'x';
			break;

		case 4:
	   /* Side A */ die2[1][3]  = 'o'; die2[1][7]  = 'o'; die2[3][1]  = 'o';
			die2[3][5]  = 'o';
	   /* Side B */ die2[4][10] = 'x';
	   /* Side C */ die2[5][5]  = 'x'; die2[7][3]  = 'x';
			break;

		case 5:
	   /* Side A */ die2[1][3]  = 'o'; die2[1][7]  = 'o'; die2[2][4]  = 'o';
			die2[3][1]  = 'o'; die2[3][5]  = 'o';
	   /* Side B */ die2[6][4]  = 'x'; 
	   /* Side C */ die2[4][8]  = 'x'; die2[4][10] = 'x'; die2[4][12] = 'x';
			break;

		case 6:	
	   /* Side A */ die2[1][3]  = 'o'; die2[1][7]  = 'o'; die2[2][2]  = 'o';
			die2[2][6]  = 'o'; die2[3][1]  = 'o'; die2[3][5]  = 'o';
	   /* Side B */ die2[4][8]  = 'x'; die2[4][12] = 'x';
	   /* Side C */ die2[5][5]  = 'x'; die2[6][4]  = 'x'; die2[7][3]  = 'x';
			break;
	}
	
	// This loop prints the ascii dice to the console window: 
	int i;
	for(i = 0; i < 9; i++)
			cout << "     " << die1[i] << die2[i] << endl;
	cout << endl;
}

void CrapsGame(){
	
	int die1_val, 
	    die2_val,
	    roll_val,		// Combined value of both dice.
	    point_val,
	    roll_count;		// Total number of rolls.
	
	char roll_input;	// User input for roll action.

	bool win_flag = false;	// True if player wins.
	bool lose_flag = false;	// True if player loses.

	Roll(die1_val, die2_val);
	roll_val = (die1_val + die2_val);

	roll_count = 1;
	cout << "------------------------------------------" << endl;
	cout << "            F I R S T  R O L L            " << endl;
	cout << "------------------------------------------" << endl;
	
	cout << "           ENTER 'R' TO ROLL : ";


	Roll_Start0:
		cin >> roll_input;
		if((roll_input == 'R') || (roll_input == 'r'))
			;
		else{
			cout << "                               ";
			goto Roll_Start0;
		}
 
	DiceDrawer(die1_val, die2_val);
	
	cout << " You roll a";	/* The following switch prints the appropriate
				 * word for the value of roll_val. */
	switch(roll_val){

		case 2:		cout << " TWO";
				break;

		case 3:		cout << " THREE";
				break;
	
		case 4:		cout << " FOUR";
				break;

		case 5:		cout << " FIVE";
				break;

		case 6:		cout << " SIX";
				break;

		case 7:		cout << " SEVEN";
				break;

		case 8:		cout << "n EIGHT";
				break;

		case 9:		cout << " NINE";
				break;

		case 10:	cout << " TEN";
				break;
	
		case 11:	cout << "n ELEVEN";
				break;

		case 12:	cout << " TWELVE";
				break;
	}
	cout << "!" << endl;

	switch(roll_val){

		case 2:		lose_flag = true;	// Player loses.
				break;

		case 3:		lose_flag = true;	// Player loses.
				break;
	
		case 4:		point_val = roll_val;	// Point is 4.
				break;	

		case 5:		point_val = roll_val;	// Point is 5.
				break;

		case 6:		point_val = roll_val;	// Point is 6.
				break;
				
		case 7: 	win_flag = true;	// Player wins.
				break;

		case 8:		point_val = roll_val;	// Point is 8.
				break;

		case 9:		point_val = roll_val;	// Point is 9.
				break;

		case 10:	point_val = roll_val;	// Point is 10.
				break;
	
		case 11:	win_flag = true;	// Player wins.
				break;

		case 12:	lose_flag = true;	// Player loses.
				break;
	}
	
	if(win_flag)
		goto Win_Scenario;
	else if(lose_flag)
		goto Lose_Scenario;
	else{
		do{

			Roll(die1_val, die2_val);
			roll_val = (die1_val + die2_val);

			roll_count++;
			cout << "------------------------------------------" << endl;
			cout << " P O I N T: " << point_val << endl;
			cout << "------------------------------------------" << endl;

			cout << "        ENTER 'R' TO ROLL AGAIN : ";
			
			Roll_Start1:
				cin >> roll_input;
				if((roll_input == 'R') || (roll_input == 'r'))
					;
				else{
					cout << "                                  ";
					goto Roll_Start1;
				}

			DiceDrawer(die1_val, die2_val);

			cout << " You roll a";
			switch(roll_val){

			case 2:		cout << " TWO";
					break;

			case 3:		cout << " THREE";
					break;
	
			case 4:		cout << " FOUR";
					break;

			case 5:		cout << " FIVE";
					break;

			case 6:		cout << " SIX";
					break;

			case 7:		cout << " SEVEN";
					break;

			case 8:		cout << "n EIGHT";
					break;

			case 9:		cout << " NINE";
					break;

			case 10:	cout << " TEN";
					break;
	
			case 11:	cout << "n ELEVEN";
					break;

			case 12:	cout << " TWELVE";
					break;
			}
			cout << "!" << endl ;

			if(roll_val == 7) 
				/* If the player rolls a 7 before reaching point, 
				 * it's game over. */
				goto Lose_Scenario;	
			else if(roll_val == point_val)
				/* If the player rolls the point value, he/she 
				 * wins the game. */
				goto Win_Scenario;
			else
				/* If any other number is rolled, the player must 
				 * roll again. */
				;

		} while(true);
	}

	Win_Scenario:	// Prints "You Win!" if player succeeds at winning the game.

		cout << "  __   __           __        ___       _ " << endl; 
		cout << "  \\ \\ / /__  _   _  \\ \\      / (_)_ __ | |" << endl; 
		cout << "   \\ V / _ \\| | | |  \\ \\ /\\ / /| | '_ \\| |" << endl; 
		cout << "    | | (_) | |_| |   \\ V  V / | | | | |_|" << endl; 
		cout << "    |_|\\___/ \\__,_|    \\_/\\_/  |_|_| |_(_)" << endl;
		cout << endl;

		return;

	Lose_Scenario:	// Prints "You Lose!" if player loses the game.

		cout << " __   __            _                   _ " << endl;
		cout << " \\ \\ / /__  _   _  | |    ___  ___  ___| |" << endl;
		cout << "  \\ V / _ \\| | | | | |   / _ \\/ __|/ _ \\ |" << endl;
		cout << "   | | (_) | |_| | | |__| (_) \\__ \\  __/_|" << endl;
		cout << "   |_|\\___/ \\__,_| |_____\\___/|___/\\___(_)" << endl;
		cout << endl;
}

int main(){

	cout << "------------------------------------------" << endl;
	cout << "      ____ ____      _    ____  ____      " << endl;
 	cout << "     / ___|  _ \\    / \\  |  _ \\/ ___|     " << endl;
 	cout << "    | |   | |_) |  / _ \\ | |_) \\___ \\     " << endl;
 	cout << "    | |___|  _ <  / ___ \\|  __/ ___) |    " << endl;
 	cout << "     \\____|_| \\_\\/_/   \\_\\_|   |____/     " << endl;
	cout << "                                          " << endl;
	cout << "------------------------------------------" << endl;
	
	srand(time(NULL));
	
	do{
		char input;	// User input character.

		CrapsGame();

		cout << " PLAY AGAIN? (Y/N) : ";
		
		Input_Start:
			cin >> input;
			if((input == 'Y') || (input == 'y'))
				;
			else if((input == 'N') || (input == 'n'))
				break;
			else{
				cout << "                     ";
				goto Input_Start;
			}	
	
	}while(true);
	
	cout << "------------------------------------------" << endl; 
	cout << "  T H A N K S   F O R   P L A Y I N G  !  " << endl;
	cout << "------------------------------------------" << endl; 
	cout << "    Need to report a bug?  Contact me!    " << endl;
	cout << "              -  kaethis@tasmantis.net	   " << endl;
	cout << endl;

	return 0;
}
